DISCOS 1.0
==========
Discos-1.0 (Release Candidate) was released 2018 September the 12th 

Remarks
-------

This release is the result of a huge process that involved a large
part of our code base in order to migrate the control software from
a 32 bits to 64 bits platform.
We now support CENTOS 6.8 64 bits and ACS-FEB1027. For a mere matter of manpower,
we won't be able to support older version any more.

We also migrate our repository from svn to github (`DISCOS organization 
<https://github.com/discos>`_).

In parallel, in order to improve quality and reliability we introduced new
concepts. Our development and bug fixing workflow is now TDD (Test Development Driven),
also we developed a number of hardware simulator that, eventually, will drive us to a Continuous
Integration approach.
Moreover, in order to improve deployment we developed am automatic provisioning system based 
on `ansible <https://www.ansible.com/use-cases/provisioning>`_.  

New features
------------

SARDARA backend 
~~~~~~~~~~~~~~~~

The SARDARA backend integration has been further improved. A better error handling
and configuration management has been put in place.The data marging is now completely
automatic and quasi-realtime. 
Support for multi-feed, full stokes observations is now available (SRT only).
 
With respect to the previous release the configurations changed. This configurations have been tested
only at the SRT and can be summarized as follows:

SK00, SK03, SK06, SK77, SC00, SL00, SP00 (L/R)
SK00S, SK03S, SK06S, SK77S, SC00S, SL00S, SP00S (Full Stokes)

More details on the various configuration can be found in the user guide. The *setSection* command
can be used to tune the configuration of the backend.

A system temperature (*tsys* command) is also available. 

A new command *getRms* has been included in order to allows a better tuning of the input levels. 
More details on the guide.

The user interface for the SARDARA component is now available.
 
Typically the configuration of the roach backend is done by the schedules.
Nevertheless it is possible to manually configure the backend with a sequence of
commands:

.. code-block:: discos

    > chooseBackend=SARDARA
    > initialize=SK00
    > integration=100
    > setSection=
 
The setSection syntax follows the general rules:

.. code-block:: discos

    > setSection=input,freq,bw,feed,pol,sr,bins

where:
	* input: it could only be 0
	* freq: start frequency (MHz), placeholder \* allowed
	* bw: band width (MHz), placeholder \* allowed
	* feed: feed identifier, it cannot be changed, placeholder \* allowed
	* pol: polarization, it cannot be changed, placeholder \* allowed
	* sr: sample rate, it cannot be changed, placeholder \* allowed
	* bins: number of frequency channels,  it could be 1024 or 16384, placeholder \* allowed

.. sectionauthor:: :ref:`cmigoni`, :ref:`amelis`


IF Distributor for the SRT
~~~~~~~~~~~~~~~~~~~~~~~~~~
The SRT has a new IFdistributor capable to perform down conversion and IF filtering.
The control of the local oscillator and the down conversion will be transparent with respect to the previous
release as the ``LPBandReceiver`` component can set it up as the other receivers. 
It is possible to use the *setLO* command from the operator input console:

.. code-block:: discos

    > receiversSetup=LLP
    > setLO=2300

This new feature is only available using the L band feed (it is not 
possible to set the local oscillator in the ``PPP`` configuration).

It is not allowed to set the LO inside the observed sky band. For instance:

.. code-block:: discos

    > receiversMode=XXL5 # Bandwidth 1625:1715
    > setLO=1650
    Error - Value not allowed. It is within the band...

It is also not possible to set a receiver mode in case the current LO value 
is inside the mode band:

.. code-block:: discos

    > receiversMode=XXL5 # Bandwidth 1625:1715
    > setLO=1500 # Ok, it is outside the RF band
    > receiversMode=XXL4 # Bandwidth 1300:1800
    Error - Mode not allowed. The LO value is within the band...

The bandwith value is always positive, while the IFs could be negative,
indicating that the IF band is inverted. For instance, in the following case:

.. code-block:: discos

    > receiversMode=XXL5 # Bandwidth 1625:1715
    > setLO=2300

the receiver panel will show ``startFreq=-675`` and ``bandwidth=90``. 

In order to control the IF filtering the command *ifd* (SRT only) has been added.
The available filters are:

============= ================== ===============
FILTER ID     Central Freq (MHz) Bandwidth (MHz)
============= ================== ===============
BW-NARROW     576                115 
BW-MEDIUM     640                230
BW-WIDE       768                460
BW-UNFILTERED see L-Band	
============= ================== ===============

.. code-block:: discos

    > ifd=filter

where:
	* filter: it could be BW-NARROW,BW-MEDIUM,BW-WIDE,BW-UNFILTERED

.. sectionauthor:: :ref:`gcarboni`, :ref:`aorlati`


System changes
-------------- 

FitsZilla fits file
~~~~~~~~~~~~~~~~~~~
The ''SECTION TABLE'' a been extended by adding two additional columns ''frequency'' and ''bandwidth''.
This data reports (in MHz) the effective start frequency and bandwidth of the bands sampled by the currently
configured backend.
Some keyword in summary.fits have now meaningful values (EXPTIME, LOGFILE ecc. for example). A more
detailed list of this keywords can found in user documentation.


.. sectionauthor:: :ref:`aorlati`

Bootup procedure
~~~~~~~~~~~~~~~~
The DISCOS bootup has been reviewed. The frontend is still acscommandcenter based
but the ssh protocol is used instead of the acsdeamons. This should both improve the ease of use 
and speed up the completion of the process. 

.. sectionauthor:: :ref:`aorlati`, :ref:`gcarboni`

Change log
----------
A change log of this release may be retrieved from this :download:`document <images/discos1.0_changelog.pdf>`

